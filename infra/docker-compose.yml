
services:
  db:
    image: postgres:15-alpine
    restart: unless-stopped
    env_file: ["../.env"]
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      # Si vas a migrar a Alembic, comenta estas dos líneas:
      # - ../database/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
      # - ../database/seeds.sql:/docker-entrypoint-initdb.d/02-seeds.sql
    ports:
      - "5432:5432"
    networks: [nutrition-network]
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: ..
      dockerfile: infra/Dockerfile.backend
    restart: unless-stopped
    env_file: ["../.env"]
    environment:
      # Respeta tus nombres actuales (no forzamos JWT_SECRET si tu código usa SECRET_KEY/ALGORITHM)
      DATABASE_URL: ${DATABASE_URL}
      SECRET_KEY: ${SECRET_KEY}
      ALGORITHM: ${ALGORITHM}
      ACCESS_TOKEN_EXPIRE_MINUTES: ${ACCESS_TOKEN_EXPIRE_MINUTES}
      PYTHONPATH: /app
      ENVIRONMENT: ${ENVIRONMENT:-development}
    volumes:
      - ../backend:/app
      - backend_uploads:/app/uploads
      - backend_logs:/app/logs
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
    networks: [nutrition-network]
    working_dir: /app
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload --log-level info
    healthcheck:
      test: ["CMD", "curl", "-fsS", "http://localhost:8000/healthz"]
      interval: 10s
      timeout: 5s
      retries: 5

  frontend:
    build:
      context: ..
      dockerfile: infra/Dockerfile.frontend
    restart: unless-stopped
    env_file: ["../.env"]
    environment:
      NODE_ENV: development
      # Importante: apunta al proxy para evitar CORS
      NEXT_PUBLIC_API_BASE: ${NEXT_PUBLIC_API_BASE}
      NEXT_PUBLIC_APP_NAME: ${NEXT_PUBLIC_APP_NAME}
      NEXT_PUBLIC_VERSION: ${NEXT_PUBLIC_VERSION}
    volumes:
      - ..:/app
      - /app/node_modules
      - /app/.next
    ports:
      - "3000:3000"
    depends_on:
      backend:
        condition: service_healthy
    networks: [nutrition-network]
    working_dir: /app
    command: npm run dev
  backend:
    # ...
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request,sys;sys.exit(0 if urllib.request.urlopen('http://localhost:8000/healthz').getcode()==200 else 1)"]
      interval: 10s
      timeout: 5s
      retries: 5

  nginx:
    image: nginx:1.27-alpine
    restart: unless-stopped
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - nginx_logs:/var/log/nginx
    ports:
      - "${NGINX_PORT:-80}:80"
    depends_on:
      backend:
        condition: service_healthy
      frontend:
        condition: service_healthy
    networks: [nutrition-network]
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost/healthz"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  postgres_data:
  backend_uploads:
  backend_logs:
  nginx_logs:

networks:
  nutrition-network:
    driver: bridge
