version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: nutritional_db
    restart: unless-stopped
    environment:
      POSTGRES_DB: nutritional_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: nutritional_password_2024
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
      - ./database/seeds.sql:/docker-entrypoint-initdb.d/02-seeds.sql
    ports:
      - "5432:5432"
    networks:
      - nutrition-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d nutritional_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # FastAPI Backend
  backend:
    build:
      context: ./backend
      dockerfile: ../infra/Dockerfile.backend
    container_name: nutritional_backend
    restart: unless-stopped
    environment:
      DATABASE_URL: postgresql://postgres:nutritional_password_2024@db:5432/nutritional_db
      SECRET_KEY: nutritional_secret_key_2024_very_secure
      ALGORITHM: HS256
      ACCESS_TOKEN_EXPIRE_MINUTES: 30
      PYTHONPATH: /app
      ENVIRONMENT: development
    volumes:
      - ./backend:/app
      - backend_uploads:/app/uploads
      - backend_logs:/app/logs
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
    networks:
      - nutrition-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    command: uvicorn src.main:app --host 0.0.0.0 --port 8000 --reload --log-level info

  # Next.js Frontend
  frontend:
    build:
      context: .
      dockerfile: ./infra/Dockerfile.frontend
    container_name: nutritional_frontend
    restart: unless-stopped
    environment:
      NODE_ENV: development
      NEXT_PUBLIC_API_URL: http://localhost:8000
      NEXT_PUBLIC_APP_NAME: Sistema Nutricional Infantil
      NEXT_PUBLIC_VERSION: 1.0.0
    volumes:
      - .:/app
      - /app/node_modules
      - /app/.next
      - frontend_cache:/app/.next/cache
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - nutrition-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
    command: npm run dev

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: nutritional_nginx
    restart: unless-stopped
    volumes:
      - ./infra/nginx.conf:/etc/nginx/nginx.conf:ro
      - nginx_logs:/var/log/nginx
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - frontend
      - backend
    networks:
      - nutrition-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for caching (optional but recommended)
  redis:
    image: redis:7-alpine
    container_name: nutritional_redis
    restart: unless-stopped
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - nutrition-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    command: redis-server --appendonly yes --requirepass nutritional_redis_2024

volumes:
  postgres_data:
    driver: local
  backend_uploads:
    driver: local
  backend_logs:
    driver: local
  frontend_cache:
    driver: local
  nginx_logs:
    driver: local
  redis_data:
    driver: local

networks:
  nutrition-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
